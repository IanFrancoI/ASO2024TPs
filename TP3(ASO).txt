tarea_SIN_hilos:

_se puede notar cuanto tiempo le toma a la tarea 1 en realizar un momento de parada, en cambio la tarea 2 y 
3 seguiran deteniendose en un tiempo fijado (tarea 2 se detiene en 1 seg y tarea 3 se detiene en 4 seg)
_ Un proceso de "Maxima Velocidad Posible" de la vida real podria ser el ARRANQUE DE UN SISTEMA OPERATIVO, 
ya sea Windows, MacOS, Linux, etc.
_ Un proceso de "Velocidad de Respuesta no dependiente de la Velocidad de Procesamineto" de la vida real podria
ser la LECTURA DE UN DISCO EXTERNO.

tareas_CON_hilos:

_se puede notar como inician las 3 tareas, y las ordena cual de las 3 es la que menos tiempo a tardado en finalizar
el proceso. Yo diria que mejoro en cuanto a orden de tiempo estimado, ya que en la tarea SIN hilos iniciaba la tarea 
1 y hasta que no finalize no iniciaria la siguiente tarea, en cambio CON hilos inician las 3 tareas y se evalua cual
es la primera en terminar.
_No, ya que el orden es alterado, no inicia y termina con tarea 1 hasta tarea 3, sino inicia con la tarea 1 hasta tarea
3 y finaliza dependiendo cual de las 3 tareas fue la que menos tiempo tardo en finalizar.
_ Un escenario real puede ser un navegador de aplicaciones, como por ejemplo Microsoft Store.

sumador-restador:

_ La ejecucion del codigo va a dar siempre nulo o 0.

sumador-restador_CON_race:

_ Se puede notar que el dicha ejecucion es instantanea y tira un resultado de numero negativo, como el -4755, el -4995 o
el -5000.
_ Lo que sucede con el valor final del acumulador es que va a generar un resultado Negativo.
_ Esto sucede debido a una condicion de carrera. Ambos hilos van accediendo y modifican el acumulador sin nunguna forma
de sincronizacion.
_ esto se puede corregir utilizando una estructura de sincronizacion como un Lock.

sumador-restador_SIN_race:

_ Lo que sucede con el valor final del acumulador mostrara un resultado nulo o 0.
_ Lo que se puede notar es que mas largo debido a las llamadas de sleep.time(0), si este mismo no estuviera el programa
se ejecutaria mas rapido.